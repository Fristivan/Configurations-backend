from typing import get_args, Optional, get_type_hints

from fastapi import APIRouter, HTTPException, Response, Depends
from pydantic import BaseModel
from sqlalchemy.orm import Session

from app.auth.auth_service import get_db, get_current_user, check_user_limit, increment_user_requests
from app.services import render_template
from app.models.docker_models import DockerfileConfig, DockerComposeConfig

router = APIRouter()

@router.get("/form-metadata/dockerfile")
def get_dockerfile_form_metadata():
    schema = DockerfileConfig.schema()
    fields = []
    dependencies = {}

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependency_map = {
        "healthcheck": ["healthcheck.test", "healthcheck.interval", "healthcheck.timeout", "healthcheck.retries"],
    }

    # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–µ–ª–∏ `DockerfileConfig`
    type_hints = get_type_hints(DockerfileConfig)

    # –ö–∞—Å—Ç–æ–º–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    type_mapping = {
        bool: "bool",
        int: "int",
        str: "str",
        list: "list",
        dict: "dict",
    }

    def get_real_type(field_name):
        """ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, —É–±–∏—Ä–∞—è `Optional[]` """
        annotation = type_hints.get(field_name, str)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–æ–π
        if hasattr(annotation, "__origin__") and annotation.__origin__ is Optional:
            annotation = get_args(annotation)[0]  # –î–æ—Å—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ Optional[]
        return annotation

    for field_name, field_info in schema["properties"].items():
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ Optional[]
        python_type = get_real_type(field_name)
        mapped_type = type_mapping.get(python_type, "str")

        field = {
            "name": field_name,
            "label": field_name.replace("_", " ").capitalize(),
            "required": field_name in schema.get("required", []),
            "defaultValue": field_info.get("default", None),
            "description": field_info.get("description", ""),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            "variableType": mapped_type  # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã
        if mapped_type == "bool":
            field["type"] = "checkbox"
        elif mapped_type == "int":
            field["type"] = "number"
        elif mapped_type == "list":
            field["type"] = "array"
        elif mapped_type == "dict":
            field["type"] = "json"
        else:
            field["type"] = "text"

        # –î–æ–±–∞–≤–ª—è–µ–º placeholder, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "example" in field_info:
            field["placeholder"] = str(field_info["example"])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º
        field["isAdvanced"] = not field["required"] and field_name not in ["base_image", "entrypoint"]

        # –ï—Å–ª–∏ –ø–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è —á–µ–∫–±–æ–∫—Å–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if field_name in dependency_map:
            dependencies[field_name] = dependency_map[field_name]

        fields.append(field)

    return {"fields": fields, "dependencies": dependencies}


# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Dockerfile
@router.post("/generate/dockerfile")
def generate_dockerfile(config: DockerfileConfig, db: Session = Depends(get_db), user=Depends(get_current_user)):
    if not user:
        raise HTTPException(status_code=401, detail="Authentication required")

    if not check_user_limit(db, user.id):
        raise HTTPException(status_code=403, detail="Request limit exceeded")

    docker_file = render_template("dockerfile.j2", config.dict())
    increment_user_requests(db, user.id)
    return Response(content=docker_file, media_type="text/plain")