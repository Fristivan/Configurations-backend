from typing import get_args, Optional, get_type_hints

from fastapi import APIRouter, HTTPException, Response, Depends
from pydantic import BaseModel
from sqlalchemy.orm import Session

from app.auth.auth_service import get_db, get_current_user, check_user_limit, increment_user_requests
from app.services import render_template
from app.models.docker_models import DockerfileConfig, DockerComposeConfig, ServiceConfig

router = APIRouter()

@router.get("/form-metadata/docker-compose/")
def get_docker_compose_form_metadata():
    schema = DockerComposeConfig.schema()
    fields = []
    dependencies = {}

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
    dependency_map = {
        "enable_networks": ["networks"],
        "enable_volumes": ["volumes"],
        "enable_build": ["build"],
        "enable_ports": ["ports"],
        "enable_depends_on": ["depends_on"],
    }

    # –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–µ–ª–∏ `DockerComposeConfig`
    type_hints = get_type_hints(DockerComposeConfig)
    service_type_hints = get_type_hints(ServiceConfig)  # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π `services`

    # –ö–∞—Å—Ç–æ–º–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    type_mapping = {
        bool: "bool",
        int: "int",
        str: "str",
        list: "list",
        dict: "dict",
    }

    def get_real_type(field_name, type_source):
        """ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, —É–±–∏—Ä–∞—è `Optional[]` """
        annotation = type_source.get(field_name, str)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–æ–π
        if hasattr(annotation, "__origin__") and annotation.__origin__ is Optional:
            annotation = get_args(annotation)[0]  # –î–æ—Å—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ Optional[]
        return annotation

    def process_field(field_name, field_info, parent="", required_fields=set(), type_source=type_hints):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å—Ö–µ–º—ã, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        full_name = f"{parent}.{field_name}" if parent else field_name
        python_type = get_real_type(field_name, type_source)
        mapped_type = type_mapping.get(python_type, "str")

        field = {
            "name": full_name,
            "label": field_name.replace("_", " ").capitalize(),
            "required": field_name in required_fields,
            "defaultValue": field_info.get("default", None),
            "description": field_info.get("description", ""),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            "variableType": mapped_type  # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã
        if mapped_type == "bool":
            field["type"] = "checkbox"
        elif mapped_type == "int":
            field["type"] = "number"
        elif mapped_type == "list":
            field["type"] = "array"
        elif mapped_type == "dict":
            field["type"] = "json"
        else:
            field["type"] = "text"

        # –î–æ–±–∞–≤–ª—è–µ–º placeholder, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "example" in field_info:
            field["placeholder"] = str(field_info["example"])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º
        field["isAdvanced"] = not field["required"] and full_name not in ["version", "services.image"]

        # –ï—Å–ª–∏ –ø–æ–ª–µ —è–≤–ª—è–µ—Ç—Å—è —á–µ–∫–±–æ–∫—Å–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if full_name in dependency_map:
            dependencies[full_name] = dependency_map[full_name]

        fields.append(field)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º **–¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è**
    required_fields = {"version"}  # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä Docker Compose

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    for field_name, field_info in schema["properties"].items():
        if field_name == "services":
            # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã services (–∏–∑ ServiceConfig)
            service_schema = ServiceConfig.schema()
            for sub_field_name, sub_field_info in service_schema["properties"].items():
                # **–¢–æ–ª—å–∫–æ image –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ**
                required_service_fields = {"image"}  # –¢–æ–ª—å–∫–æ image —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
                process_field(sub_field_name, sub_field_info, parent="services",
                              required_fields=required_service_fields, type_source=service_type_hints)
        else:
            process_field(field_name, field_info, required_fields=required_fields)

    return {"fields": fields, "dependencies": dependencies}



# üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è docker-compose.yml
@router.post("/generate/docker-compose/")
def generate_docker_compose(config: DockerComposeConfig, db: Session = Depends(get_db), user=Depends(get_current_user)):
    if not user:
        raise HTTPException(status_code=401, detail="Authentication required")

    if not check_user_limit(db, user.id):
        raise HTTPException(status_code=403, detail="Request limit exceeded")

    if not config.services:
        raise HTTPException(status_code=400, detail="Services cannot be empty")

    docker = render_template("docker-compose.j2", config.dict())
    increment_user_requests(db, user.id)
    return Response(content=docker, media_type="text/plain")
